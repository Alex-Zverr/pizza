generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
    id Int @id @default(autoincrement())

    fullName String
    email    String   @unique
    password String
    role     UserRole @default(USER)
    verified DateTime

    provider   String?
    providerId String?

    cart              Cart?
    orders            Order[]
    verificationToken VerificationToken?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category {
    id Int @id @default(autoincrement())

    slug     String    @unique
    name     String
    products Product[]

    createAt DateTime @default(now())
    updateAt DateTime @updatedAt
}

model Product {
    id Int @id @default(autoincrement())

    name     String
    imageUrl String

    category   Category @relation(fields: [categoryId], references: [id])
    categoryId Int

    variants    ProductVariant[]
    ingredients Ingredient[]

    createAt DateTime @default(now())
    updateAt DateTime @updatedAt
}

model ProductVariant {
    id Int @id @default(autoincrement())

    price     Int
    size      Int?
    pizzaType Int?

    cartItem     CartItem[]
    orderProduct OrderProduct[]

    product   Product @relation(fields: [productId], references: [id])
    productId Int
}

model Ingredient {
    id Int @id @default(autoincrement())

    name     String
    imageUrl String
    price    Int

    products Product[]
    cartItem CartItem[]

    createAt DateTime @default(now())
    updateAt DateTime @updatedAt
}

model Cart {
    id Int @id @default(autoincrement())

    user   User?  @relation(fields: [userId], references: [id])
    userId Int?   @unique
    token  String

    cartItem    CartItem[]
    totalAmount Int

    createAt DateTime @default(now())
    updateAt DateTime @updatedAt
}

model CartItem {
    id Int @id @default(autoincrement())

    cart   Cart @relation(fields: [cartId], references: [id])
    cartId Int

    productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
    productVariantId Int
    quantity         Int

    ingredient Ingredient[]

    createAt DateTime @default(now())
    updateAt DateTime @updatedAt
}

model Order {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?

    token String

    totalAmount Int
    staus       OrderStatus
    payment     String?

    orderProduct OrderProduct[]

    fulName String
    address String
    email   String
    phone   String
    comment String

    createAt DateTime @default(now())
    updateAt DateTime @updatedAt
}

model OrderProduct {
    id Int @id @default(autoincrement())

    order   Order @relation(fields: [orderId], references: [id])
    orderId Int

    productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
    productVariantId Int
    quantity         Int

    createAt DateTime @default(now())
    updateAt DateTime @updatedAt
}

model VerificationToken {
    id Int @id @default(autoincrement())

    user     User     @relation(fields: [userId], references: [id])
    userId   Int      @unique
    token    String
    createAt DateTime @default(now())
}

enum OrderStatus {
    CREATED
    COMPLETED
    CANCELLED
}

enum UserRole {
    USER
    ADMIN
}
